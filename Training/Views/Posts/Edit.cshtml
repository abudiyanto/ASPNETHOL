@model Training.ViewModels.Post


@{
    ViewBag.Title = "Edit Berita";
    Layout = "~/Views/Shared/_LayoutAdmin.cshtml";
}

<div class="row page-titles">
    <div class="col-md-6 col-8 align-self-center">
        <h3 class="text-themecolor m-b-0 m-t-0">Kelola Berita</h3>
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="@Url.Action("Index")">Berita</a></li>
            <li class="breadcrumb-item active">Edit Berita</li>
        </ol>
    </div>
</div>

<div class="row">
    <div class="col-sm-12">
        <div class="card">
            <div class="card-body">
                @using (Html.BeginForm("Edit", "Posts", FormMethod.Post, new { enctype = "multipart/form-data" }))
                {
                    @Html.AntiForgeryToken()

                    <div class="form-horizontal">
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        @Html.HiddenFor(model => model.Permalink)


                        <div class="form-group row">
                            <div class="col-md-2">
                                <label>Judul</label>
                            </div>
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group row">
                            <div class="col-md-2">
                                <label>Intro</label>
                            </div>
                            <div class="col-sm">
                                @Html.TextAreaFor(model => model.Intro, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Intro, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group row">
                            <div class="col-md-2">
                                <label>Konten</label>
                            </div>
                            <div class="col-sm">
                                @Html.TextAreaFor(model => model.Content, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Content, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group row">
                            <div class="col-md-2">
                                <label>Kategori</label>
                            </div>
                            <div class="col-md-10">
                                <select class="select2 m-b-10 select2-multiple" style="width: 100%" id="Categories" name="Categories" multiple="multiple" data-placeholder="Choose">
                                    @{
                                        foreach (var i in ViewBag.Categories)
                                        {
                                            if (i.Selected)
                                            {
                                                <option value="@i.Value" selected>@i.Text</option>
                                            }
                                            else
                                            {
                                                <option value="@i.Value">@i.Text</option>
                                            }
                                        }
                                    }
                                </select>
                                @Html.ValidationMessageFor(model => model.Categories, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group row">
                            @Html.LabelFor(model => model.SEOTitle, htmlAttributes: new { @class = " col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.SEOTitle, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.SEOTitle, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group row">
                            @Html.LabelFor(model => model.SEODescription, htmlAttributes: new { @class = " col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.SEODescription, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.SEODescription, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group row">
                            <div class="col-md-2">
                                <label>SEO Keyword</label>
                            </div>
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.SEOKeywords, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.SEOKeywords, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-offset-2 col-md-10">
                                <input type="submit" value="Simpan" class="btn btn-info" />
                                @Html.ActionLink("Kembali", "Index", null, new { @class = "btn btn-secondary" })
                            </div>
                        </div>
                    </div>
                }

            </div>
        </div>
    </div>
</div>

@section styles
{
    <link href="~/assets/plugins/select2/dist/css/select2.min.css" rel="stylesheet" type="text/css" />
}
@section scripts{
    <script src="~/assets/plugins/tinymce/tinymce.min.js"></script>
    <script src="~/assets/plugins/select2/dist/js/select2.full.min.js" type="text/javascript"></script>
    <script>
        tinymce.init({
            selector: "textarea",
            theme: "modern",
            height: 300,
            plugins: [
                "advlist autolink link image lists charmap print preview hr anchor pagebreak spellchecker",
                "searchreplace wordcount visualblocks visualchars code fullscreen insertdatetime media nonbreaking",
                "save table contextmenu directionality emoticons template paste textcolor"
            ],
            toolbar: "insertfile undo redo | styleselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | l      ink image | print preview media fullpage | forecolor backcolor emoticons",

        });
    </script>
    <script>
        jQuery(document).ready(function () {

            // For select 2
            $(".select2").select2();
            $('.selectpicker').selectpicker();
            $(".ajax").select2({
                ajax: {
                    url: "https://api.github.com/search/repositories",
                    dataType: 'json',
                    delay: 250,
                    data: function (params) {
                        return {
                            q: params.term, // search term
                            page: params.page
                        };
                    },
                    processResults: function (data, params) {
                        // parse the results into the format expected by Select2
                        // since we are using custom formatting functions we do not need to
                        // alter the remote JSON data, except to indicate that infinite
                        // scrolling can be used
                        params.page = params.page || 1;
                        return {
                            results: data.items,
                            pagination: {
                                more: (params.page * 30) < data.total_count
                            }
                        };
                    },
                    cache: true
                },
                escapeMarkup: function (markup) {
                    return markup;
                }, // let our custom formatter work
                minimumInputLength: 1,
                templateResult: formatRepo, // omitted for brevity, see the source of this page
                templateSelection: formatRepoSelection // omitted for brevity, see the source of this page
            });
        });
    </script>
}